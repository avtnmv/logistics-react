import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import Header from './Header';
import Footer from './Footer';
import FormMessage from './FormMessage';
import PasswordToggle from './PasswordToggle';
import { getGlobalTestDB, logTestData, isUserRegistered, registerUser } from '../data/testData';
import { usePasswordToggle } from '../hooks/usePasswordToggle';

const Registration: React.FC = () => {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState<'phone' | 'code' | 'details'>('phone');
  const [phone, setPhone] = useState('');
  const [codeInputs, setCodeInputs] = useState(['', '', '', '']);
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState<'success' | 'error' | 'info'>('info');
  const [showMessage, setShowMessage] = useState(false);
  const [isCodeCorrect, setIsCodeCorrect] = useState<boolean | null>(null);
  const [countdown, setCountdown] = useState(0);

  // –•—É–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π
  const passwordToggle = usePasswordToggle();
  const confirmPasswordToggle = usePasswordToggle();

  // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const testDB = getGlobalTestDB();

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  React.useEffect(() => {
    logTestData('–¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');
  }, []);

  // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (countdown > 0) {
      interval = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [countdown]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!phone.trim()) {
      showFormMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ª—é–±–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º +XXX –∏ –¥–ª–∏–Ω–æ–π 10-15 —Ü–∏—Ñ—Ä)
    const phoneRegex = /^\+\d{1,4}\d{7,14}$/;
    if (!phoneRegex.test(phone)) {
      showFormMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +380XXXXXXXXX, +998XXXXXXXXX, +1XXXXXXXXXX)', 'error');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞
    const code = Math.floor(1000 + Math.random() * 9000).toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (isUserRegistered(phone, testDB)) {
      showFormMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'info');
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
      const tempPassword = 'Temp' + Math.random().toString(36).substring(2, 8) + '!';
      registerUser(phone, tempPassword, testDB);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑—É –∫–æ–¥–æ–≤
      testDB.codes[phone] = code;
      
      showFormMessage('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'success');
      setCurrentStep('code');
      setCountdown(30);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
      console.log('');
      console.log('==================================================');
      console.log('                –ö–û–î –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò: ' + code);
      console.log('==================================================');
      console.log('');
      console.log('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + phone);
      console.log('–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ' + code);
      console.log('');
    }
  };

  const showFormMessage = (text: string, type: 'success' | 'error' | 'info') => {
    setMessage(text);
    setMessageType(type);
    setShowMessage(true);
    
    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞
    // const duration = text.includes('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω') ? 25000 : 5000;
    // setTimeout(() => {
    //   setShowMessage(false);
    // }, duration);
  };

  const handleCodeSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const code = codeInputs.join('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –≤–≤–µ–¥–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if (code.length !== 4) {
      showFormMessage('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥', 'error');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if (!/^\d{4}$/.test(code)) {
      showFormMessage('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä', 'error');
      return;
    }
    
    if (testDB.codes[phone] === code) {
      // –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      setIsCodeCorrect(true);
      showFormMessage('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!', 'success');
      setTimeout(() => {
        setCurrentStep('details');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        setIsCodeCorrect(null);
      }, 1000);
    } else {
      // –ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      setIsCodeCorrect(false);
      showFormMessage('–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞', 'error');
      setCodeInputs(['', '', '', '']);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setIsCodeCorrect(null);
      }, 2000);
    }
  };

  const handleDetailsSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (!firstName.trim()) {
      showFormMessage('–í–≤–µ–¥–∏—Ç–µ –∏–º—è', 'error');
      return;
    }
    
    if (!lastName.trim()) {
      showFormMessage('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é', 'error');
      return;
    }
    
    if (!password.trim()) {
      showFormMessage('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'error');
      return;
    }
    
    if (!confirmPassword.trim()) {
      showFormMessage('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å', 'error');
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      showFormMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
      return;
    }
    
    if (!/[A-Z]/.test(password)) {
      showFormMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É', 'error');
      return;
    }
    
    if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
      showFormMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (!@#$%^&*(),.?":{}|<>)', 'error');
      return;
    }
    
    if (password !== confirmPassword) {
      showFormMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞', 'error');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testDB.users[phone].password = password;
    
    showFormMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      navigate('/');
    }, 2000);
  };

  const handleResendCode = () => {
    if (countdown > 0) return;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    const newCode = Math.floor(1000 + Math.random() * 9000).toString();
    testDB.codes[phone] = newCode;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    console.log('');
    console.log('==================================================');
    console.log('                –ü–û–í–¢–û–†–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ö–û–î–ê');
    console.log('==================================================');
    console.log('');
    console.log('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + phone);
    console.log('üîë –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞: ' + newCode);
    console.log('');
    console.log('‚úÖ –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ' + phone);
    console.log('');
    
    showFormMessage('–ö–æ–¥ –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'success');
    setCountdown(30);
  };

  const handleChangePhone = () => {
    setCurrentStep('phone');
    setPhone('');
    setCodeInputs(['', '', '', '']);
    setCountdown(0);
    setIsCodeCorrect(null);
  };

  const handleCodeInputChange = (index: number, value: string) => {
    const newInputs = [...codeInputs];
    newInputs[index] = value;
    setCodeInputs(newInputs);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
    if (value && index < 3) {
      const nextInput = document.querySelector(`input[data-index="${index + 1}"]`) as HTMLInputElement;
      if (nextInput) nextInput.focus();
    }
  };

  const handleCodeKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {
    // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Backspace –∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—é
    if (e.key === 'Backspace' && codeInputs[index] === '' && index > 0) {
      const prevInput = document.querySelector(`input[data-index="${index - 1}"]`) as HTMLInputElement;
      if (prevInput) {
        prevInput.focus();
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ
        const newInputs = [...codeInputs];
        newInputs[index - 1] = '';
        setCodeInputs(newInputs);
      }
    }
    
    // –ï—Å–ª–∏ –∑–∞–∂–∞—Ç Backspace –∏ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è
    if (e.key === 'Backspace' && codeInputs[index] !== '') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∂–∞—Ç –ª–∏ Backspace (—Å–æ–±—ã—Ç–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è)
      if (e.repeat) {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è
        setCodeInputs(['', '', '', '']);
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
        const firstInput = document.querySelector(`input[data-index="0"]`) as HTMLInputElement;
        if (firstInput) firstInput.focus();
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        e.preventDefault();
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç Backspace –≤ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ –∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ, –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è
    if (e.key === 'Backspace' && index === 0 && codeInputs[index] === '') {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è
      setCodeInputs(['', '', '', '']);
      e.preventDefault();
    }
  };

  const handleCodePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData('text').slice(0, 4);
    
    if (/^\d{4}$/.test(pastedData)) {
      const newInputs = pastedData.split('');
      setCodeInputs([...newInputs, '', '', '', ''].slice(0, 4));
    }
  };

  return (
    <>
      <Header />
      
      <main className="main container">
        <div className="main__container">
          <AnimatePresence mode="wait">
            {/* –®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
            {currentStep === 'phone' && (
              <motion.div 
                key="phone"
                className="form-container form-container--active"
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 50 }}
                transition={{ duration: 0.3 }}
              >
                <svg width="50" height="50" viewBox="0 0 50 50" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <circle cx="25" cy="25" r="20.833" fill="#EEF4F7"/>
                  <path d="M26.736 31.076a.868.868 0 1 0 0 1.736h4.34c.96 0 1.736-.777 1.736-1.736V18.923c0-.959-.777-1.736-1.736-1.736h-4.34a.868.868 0 1 0 0 1.736h4.34v12.153z" fill="#4472B8"/>
                  <path d="M28.224 25.608a.87.87 0 0 0 .248-.606v-.005a.87.87 0 0 0-.254-.611l-3.472-3.472a.868.868 0 1 0-1.228 1.227l1.99 1.99h-8.32a.868.868 0 1 0 0 1.737h8.32l-1.99 1.99a.868.868 0 1 0 1.228 1.227l3.471-3.471z" fill="#4472B8"/>
                </svg>

                <h2 className="form-container__title">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
                <p className="form-container__description">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ</p>

                <FormMessage 
                  message={message} 
                  type={messageType} 
                  isVisible={showMessage} 
                />

                <form className="form" onSubmit={handleSubmit}>
                  <div className="form__group">
                    <input 
                      type="tel" 
                      className="form__input" 
                      placeholder=" " 
                      value={phone}
                      onChange={(e) => setPhone(e.target.value)}
                      required 
                    />
                    <label className="form__label">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
                  </div>

                  <button type="submit" className="form__button form__button--login">
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                  </button>
                </form>

                <div className="form-container__footer">
                  <p className="form-container__text">–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?</p>
                  <button 
                    className="form__button form-container__button"
                    onClick={() => navigate('/')}
                  >
                    –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                  </button>
                </div>
              </motion.div>
            )}

            {/* –®–∞–≥ 2: –í–≤–æ–¥ –∫–æ–¥–∞ */}
            {currentStep === 'code' && (
              <motion.div 
                key="code"
                className="form-container"
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 50 }}
                transition={{ duration: 0.3 }}
              >
                <svg width="50" height="50" viewBox="0 0 50 50" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <circle cx="25" cy="25" r="20.833" fill="#EEF4F7"/>
                  <path d="M26.736 31.076a.868.868 0 1 0 0 1.736h4.34c.96 0 1.736-.777 1.736-1.736V18.923c0-.959-.777-1.736-1.736-1.736h-4.34a.868.868 0 1 0 0 1.736h4.34v12.153z" fill="#4472B8"/>
                  <path d="M28.224 25.608a.87.87 0 0 0 .248-.606v-.005a.87.87 0 0 0-.254-.611l-3.472-3.472a.868.868 0 1 0-1.228 1.227l1.99 1.99h-8.32a.868.868 0 1 0 0 1.737h8.32l-1.99 1.99a.868.868 0 1 0 1.228 1.227l3.471-3.471z" fill="#4472B8"/>
                </svg>

                <h2 className="form-container__title">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</h2>
                <p className="form-container__description">–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä <span>{phone}</span></p>

                <FormMessage 
                  message={message} 
                  type={messageType} 
                  isVisible={showMessage} 
                />

                <form className="form" onSubmit={handleCodeSubmit}>
                  <div className="code-input-container" onPaste={handleCodePaste}>
                    {codeInputs.map((value, index) => (
                      <input
                        key={index}
                        type="text"
                        className={`code-input ${
                          isCodeCorrect === true ? 'code-input--correct' : 
                          isCodeCorrect === false ? 'code-input--incorrect' : ''
                        }`}
                        maxLength={1}
                        data-index={index}
                        value={value}
                        onChange={(e) => handleCodeInputChange(index, e.target.value)}
                        onKeyDown={(e) => handleCodeKeyDown(index, e)}
                        autoComplete="off"
                      />
                    ))}
                  </div>

                  <div className="form-buttons">
                    <button type="submit" className="form__button form__button--login">
                      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                    </button>
                    <button 
                      type="button" 
                      className="form__button form__button--secondary"
                      onClick={handleResendCode}
                      disabled={countdown > 0}
                    >
                      {countdown > 0 ? `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑ (${countdown}s)` : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â—ë —Ä–∞–∑'}
                    </button>
                    <button 
                      type="button" 
                      className="form__button form__button--secondary"
                      onClick={handleChangePhone}
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    </button>
                  </div>
                </form>
              </motion.div>
            )}

            {/* –®–∞–≥ 3: –í–≤–æ–¥ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
            {currentStep === 'details' && (
              <motion.div 
                key="details"
                className="form-container"
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 50 }}
                transition={{ duration: 0.3 }}
              >
                <svg width="50" height="50" viewBox="0 0 50 50" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <circle cx="25" cy="25" r="20.833" fill="#EEF4F7"/>
                  <path d="M26.736 31.076a.868.868 0 1 0 0 1.736h4.34c.96 0 1.736-.777 1.736-1.736V18.923c0-.959-.777-1.736-1.736-1.736h-4.34a.868.868 0 1 0 0 1.736h4.34v12.153z" fill="#4472B8"/>
                  <path d="M28.224 25.608a.87.87 0 0 0 .248-.606v-.005a.87.87 0 0 0-.254-.611l-3.472-3.472a.868.868 0 1 0-1.228 1.227l1.99 1.99h-8.32a.868.868 0 1 0 0 1.737h8.32l-1.99 1.99a.868.868 0 1 0 1.228 1.227l3.471-3.471z" fill="#4472B8"/>
                </svg>

                <h2 className="form-container__title">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
                <p className="form-container__description">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>

                <FormMessage 
                  message={message} 
                  type={messageType} 
                  isVisible={showMessage} 
                />

                <form className="form" onSubmit={handleDetailsSubmit}>
                  <div className="form__group">
                    <input 
                      type="text" 
                      className="form__input" 
                      placeholder=" " 
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      required 
                    />
                    <label className="form__label">–ò–º—è</label>
                  </div>

                  <div className="form__group">
                    <input 
                      type="text" 
                      className="form__input" 
                      placeholder=" " 
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                      required 
                    />
                    <label className="form__label">–§–∞–º–∏–ª–∏—è</label>
                  </div>

                  <div className="form__group">
                    <input 
                      type={passwordToggle.isVisible ? 'text' : 'password'}
                      className="form__input" 
                      placeholder=" " 
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      required 
                    />
                    <label className="form__label">–ü–∞—Ä–æ–ª—å</label>
                    <PasswordToggle 
                      isVisible={passwordToggle.isVisible} 
                      onToggle={passwordToggle.toggle} 
                    />
                  </div>

                  <div className="form__group">
                    <input 
                      type={confirmPasswordToggle.isVisible ? 'text' : 'password'}
                      className="form__input" 
                      placeholder=" " 
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      required 
                    />
                    <label className="form__label">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                    <PasswordToggle 
                      isVisible={confirmPasswordToggle.isVisible} 
                      onToggle={confirmPasswordToggle.toggle} 
                    />
                  </div>

                  <button type="submit" className="form__button form__button--login">
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                  </button>
                </form>

                <div className="form-container__footer">
                  <p className="form-container__text">–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?</p>
                  <button 
                    className="form__button form-container__button"
                    onClick={() => navigate('/')}
                  >
                    –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                  </button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </main>
      
      <Footer />
    </>
  );
};

export default Registration;
