import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import Header from './Header';
import LeftSidebar from './LeftSidebar';
import { useCurrentUser } from '../hooks/useCurrentUser';
import '../css/left-sidebar.css';
import '../css/homepage.css';

const Homepage: React.FC = () => {
  const location = useLocation();
  const [activeForm, setActiveForm] = useState<'cards' | 'add-cargo' | 'add-transport'>('cards');
  const [loadingCity, setLoadingCity] = useState('');
  const [unloadingCity, setUnloadingCity] = useState('');
  const [showLoadingSuggestions, setShowLoadingSuggestions] = useState(false);
  const [showUnloadingSuggestions, setShowUnloadingSuggestions] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  const [loadingStartDate, setLoadingStartDate] = useState('');
  const [loadingEndDate, setLoadingEndDate] = useState('');
  const [dateError, setDateError] = useState('');
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑"
  const [showCargoDimensions, setShowCargoDimensions] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
  const [showTransportDimensions, setShowTransportDimensions] = useState(false);
  
  // –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentUser = useCurrentUser();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è select —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–æ–±—â–∏–µ –¥–ª—è –æ–±–µ–∏—Ö —Ñ–æ—Ä–º)
  const [selectedValues, setSelectedValues] = useState({
    loadingType: '',
    cargoType: '',
    vehicleType: '',
    reloadType: '',
    paymentMethod: '',
    paymentTerm: '',
    bargain: ''
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º
  const [formData, setFormData] = useState({
    // –û–±—â–∏–µ –ø–æ–ª—è
    loadingStartDate: '',
    loadingEndDate: '',
    loadingCity: '',
    unloadingCity: '',
    
    // –ü–æ–ª—è –¥–ª—è –≥—Ä—É–∑–∞
    cargoWeight: '',
    cargoVolume: '',
    vehicleCount: '',
    cargoLength: '',
    cargoWidth: '',
    cargoHeight: '',
    cargoPrice: '',
    cargoCurrency: 'USD',
    
    // –ü–æ–ª—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    transportWeight: '',
    transportVolume: '',
    transportLength: '',
    transportWidth: '',
    transportHeight: '',
    transportPrice: '',
    transportCurrency: 'USD',
    
    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    additionalPhone: '',
    email: '',
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    additionalInfo: ''
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const [showCard, setShowCard] = useState(false);
  const [currentCard, setCurrentCard] = useState<any>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [validationErrors, setValidationErrors] = useState<{[key: string]: boolean}>({});
  const [shakeFields, setShakeFields] = useState<{[key: string]: boolean}>({});
  const [deletingCardId, setDeletingCardId] = useState<number | null>(null);

  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
  const citiesDatabase = [
    '–ö–∏–µ–≤, –£–∫—Ä–∞–∏–Ω–∞',
    '–ö–∏—à–∏–Ω–µ–≤, –ú–æ–ª–¥–æ–≤–∞',
    '–ö–∏—Ä–æ–≤, –†–æ—Å—Å–∏—è',
    '–ö–∏—Ä–æ–≤–æ–≥—Ä–∞–¥, –£–∫—Ä–∞–∏–Ω–∞',
    '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è',
    '–¢–∞—à–∫–µ–Ω—Ç, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    '–°–∞–º–∞—Ä–∫–∞–Ω–¥, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    '–ë—É—Ö–∞—Ä–∞, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    '–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    '–ê—Å—Ç–∞–Ω–∞, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    '–ú–∏–Ω—Å–∫, –ë–µ–ª–∞—Ä—É—Å—å',
    '–í–∏–ª—å–Ω—é—Å, –õ–∏—Ç–≤–∞',
    '–†–∏–≥–∞, –õ–∞—Ç–≤–∏—è',
    '–¢–∞–ª–ª–∏–Ω, –≠—Å—Ç–æ–Ω–∏—è'
  ];

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const getCargoTypeName = (value: string): string => {
    const cargoTypes: { [key: string]: string } = {
      'pallets': '–ì—Ä—É–∑ –Ω–∞ –ø–∞–ª–ª–µ—Ç–∞—Ö',
      'equipment': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      'construction': '–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      'metal': '–ú–µ—Ç–∞–ª–ª',
      'metal-products': '–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç',
      'pipes': '–¢—Ä—É–±—ã',
      'food': '–ü—Ä–æ–¥—É–∫—Ç—ã',
      'big-bags': '–ì—Ä—É–∑ –≤ –±–∏–≥-–±—ç–≥–∞—Ö',
      'container': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
      'cement': '–¶–µ–º–µ–Ω—Ç',
      'bitumen': '–ë–∏—Ç—É–º',
      'fuel': '–ì–°–ú',
      'flour': '–ú—É–∫–∞',
      'oversized': '–ù–µ–≥–∞–±–∞—Ä–∏—Ç',
      'cars': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏',
      'lumber': '–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      'concrete': '–ë–µ—Ç–æ–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
      'furniture': '–ú–µ–±–µ–ª—å',
      'other': '–î—Ä—É–≥–æ–π —Ç–∏–ø'
    };
    return cargoTypes[value] || value;
  };

  const getVehicleTypeName = (value: string): string => {
    const vehicleTypes: { [key: string]: string } = {
      'tent': '–¢–µ–Ω—Ç',
      'isotherm': '–ò–∑–æ—Ç–µ—Ä–º',
      'refrigerator': '–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä',
      'flatbed': '–ë–æ—Ä—Ç–æ–≤–æ–π',
      'car-carrier': '–ê–≤—Ç–æ–≤–æ–∑',
      'platform': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞',
      'cement-truck': '–¶–µ–º–µ–Ω—Ç–æ–≤–æ–∑',
      'bitumen-truck': '–ë–∏—Ç—É–º–æ–≤–æ–∑',
      'fuel-truck': '–ë–µ–Ω–∑–æ–≤–æ–∑',
      'flour-truck': '–ú—É–∫–æ–≤–æ–∑',
      'tow-truck': '–≠–≤–∞–∫—É–∞—Ç–æ—Ä',
      'timber-truck': '–õ–µ—Å–æ–≤–æ–∑',
      'grain-truck': '–ó–µ—Ä–Ω–æ–≤–æ–∑',
      'trailer': '–¢—Ä–∞–ª',
      'dump-truck': '–°–∞–º–æ—Å–≤–∞–ª',
      'container-truck': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑',
      'oversized-truck': '–ù–µ–≥–∞–±–∞—Ä–∏—Ç',
      'bus': '–ê–≤—Ç–æ–±—É—Å',
      'gas-truck': '–ì–∞–∑–æ–≤–æ–∑',
      'other-truck': '–î—Ä—É–≥–æ–π —Ç–∏–ø'
    };
    return vehicleTypes[value] || value;
  };

  const getReloadTypeName = (value: string): string => {
    const reloadTypes: { [key: string]: string } = {
      'no-reload': '–ë–µ–∑ –¥–æ–≥—Ä—É–∑–∫–∏ (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –∞–≤—Ç–æ)',
      'possible-reload': '–í–æ–∑–º–æ–∂–Ω–∞ –¥–æ–∑–∞–≥—Ä—É–∑–∫–∞'
    };
    return reloadTypes[value] || value;
  };

  // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–∞–±–∏–Ω–µ—Ç
  useEffect(() => {
    document.body.style.backgroundColor = '#F5F5F5';
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      document.body.style.backgroundColor = 'white';
    };
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ /my-transports
  useEffect(() => {
    if (location.pathname === '/my-transports') {
      setActiveForm('cards');
    }
  }, [location.pathname]);

  // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (currentUser?.id) {
      console.log('=== –ú–ò–ì–†–ê–¶–ò–Ø –ö–ê–†–¢–û–ß–ï–ö ===');
      console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
      
      const allCards = JSON.parse(localStorage.getItem('transportCards') || '[]');
      console.log('–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ localStorage:', allCards);
      
      const userCards = allCards.filter((card: any) => card.userId === currentUser.id);
      console.log('–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', userCards);
      
      if (userCards.length > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const storageKey = `transportCards_${currentUser.id}`;
        localStorage.setItem(storageKey, JSON.stringify(userCards));
        console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', userCards.length, '–∫–∞—Ä—Ç–æ—á–µ–∫');
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤:', storageKey);
      } else {
        console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      }
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤–æ–∑–º–æ–∂–Ω–∞');
    }
  }, [currentUser]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤–Ω–µ –ø–æ–ø-–∞–ø–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (!target.closest('.form-field')) {
        setShowLoadingSuggestions(false);
        setShowUnloadingSuggestions(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleAddCargo = () => {
    setActiveForm('add-cargo');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    setShowCargoDimensions(false);
    setShowTransportDimensions(false);
  };

  const handleAddTransport = () => {
    setActiveForm('add-transport');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    setShowCargoDimensions(false);
    setShowTransportDimensions(false);
  };

  const handleShowCards = () => {
    setActiveForm('cards');
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
  const filterCities = (query: string) => {
    if (!query.trim()) return [];
    return citiesDatabase.filter(city => 
      city.toLowerCase().includes(query.toLowerCase())
    );
  };

  const handleCitySelect = (city: string, isLoading: boolean) => {
    if (isLoading) {
      setLoadingCity(city);
      setFormData(prev => ({ ...prev, loadingCity: city }));
      setShowLoadingSuggestions(false);
    } else {
      setUnloadingCity(city);
      setFormData(prev => ({ ...prev, unloadingCity: city }));
      setShowUnloadingSuggestions(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≥–æ—Ä–æ–¥–æ–≤
  const handleLoadingCityChange = (value: string) => {
    setLoadingCity(value);
    setFormData(prev => ({ ...prev, loadingCity: value }));
    setShowLoadingSuggestions(value.length > 0);
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (validationErrors.loadingCity) {
      setValidationErrors(prev => ({ ...prev, loadingCity: false }));
    }
  };

  const handleUnloadingCityChange = (value: string) => {
    setUnloadingCity(value);
    setFormData(prev => ({ ...prev, unloadingCity: value }));
    setShowUnloadingSuggestions(value.length > 0);
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (validationErrors.unloadingCity) {
      setValidationErrors(prev => ({ ...prev, unloadingCity: false }));
    }
  };

  const handleClickOutside = () => {
    setShowLoadingSuggestions(false);
    setShowUnloadingSuggestions(false);
  };

  const handleSelectChange = (field: string, value: string) => {
    setSelectedValues(prev => ({
      ...prev,
      [field]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (validationErrors[field]) {
      setValidationErrors(prev => ({ ...prev, [field]: false }));
    }
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  const validateDates = (startDate: string, endDate: string): boolean => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (start < today) {
      setDateError('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è');
      return false;
    }
    
    if (end < start) {
      setDateError('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞');
      return false;
    }
    
    setDateError('');
    return true;
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
  const handleStartDateChange = (date: string) => {
    setFormData(prev => ({ ...prev, loadingStartDate: date }));
    if (formData.loadingEndDate && !validateDates(date, formData.loadingEndDate)) {
      setLoadingEndDate('');
      setFormData(prev => ({ ...prev, loadingEndDate: '' }));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const handleEndDateChange = (date: string) => {
    setFormData(prev => ({ ...prev, loadingEndDate: date }));
    if (formData.loadingStartDate) {
      validateDates(formData.loadingStartDate, date);
    }
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –≥—Ä—É–∑–∞
  const validateCargoForm = () => {
    const errors: {[key: string]: boolean} = {};
    const requiredFields = [
      'loadingStartDate',
      'loadingEndDate', 
      'loadingCity',
      'unloadingCity',
      'cargoWeight',
      'cargoVolume'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    for (const field of requiredFields) {
      if (!formData[field as keyof typeof formData] || formData[field as keyof typeof formData] === '') {
        errors[field] = true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º select –ø–æ–ª—è
    if (!selectedValues.loadingType) {
      errors['loadingType'] = true;
    }
    if (!selectedValues.cargoType) {
      errors['cargoType'] = true;
    }
    
    setValidationErrors(errors);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä—è—Å–∫–∏
    if (Object.keys(errors).length > 0) {
      setShakeFields(errors);
      setTimeout(() => setShakeFields({}), 600);
    }
    
    return Object.keys(errors).length === 0;
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  const validateTransportForm = () => {
    const errors: {[key: string]: boolean} = {};
    const requiredFields = [
      'loadingStartDate',
      'loadingEndDate',
      'loadingCity', 
      'unloadingCity',
      'transportWeight',
      'transportVolume'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    for (const field of requiredFields) {
      if (!formData[field as keyof typeof formData] || formData[field as keyof typeof formData] === '') {
        errors[field] = true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º select –ø–æ–ª—è
    if (!selectedValues.vehicleType) {
      errors['vehicleType'] = true;
    }
    
    setValidationErrors(errors);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä—è—Å–∫–∏
    if (Object.keys(errors).length > 0) {
      setShakeFields(errors);
      setTimeout(() => setShakeFields({}), 600);
    }
    
    return Object.keys(errors).length === 0;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  const deleteCard = (cardId: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
      setDeletingCardId(cardId);
      
      // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ 300–º—Å (–≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏)
      setTimeout(() => {
        if (currentUser?.id) {
          // –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const storageKey = `transportCards_${currentUser.id}`;
          const userCards = JSON.parse(localStorage.getItem(storageKey) || '[]');
          const updatedUserCards = userCards.filter((card: any) => card.id !== cardId);
          localStorage.setItem(storageKey, JSON.stringify(updatedUserCards));
          
          // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          const allCards = JSON.parse(localStorage.getItem('transportCards') || '[]');
          const updatedAllCards = allCards.filter((card: any) => card.id !== cardId);
          localStorage.setItem('transportCards', JSON.stringify(updatedAllCards));
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setDeletingCardId(null);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
        setActiveForm('cards');
      }, 300);
    }
  };

  const createCard = (type: 'cargo' | 'transport') => {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò ===');
    console.log('currentUser:', currentUser);
    console.log('currentUser?.id:', currentUser?.id);
    console.log('localStorage currentUser:', localStorage.getItem('currentUser'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!currentUser || !currentUser.id) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç ID
      if (currentUser && !currentUser.id) {
        console.log('üîß –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const fixedUser = {
          ...currentUser,
          id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ localStorage
        localStorage.setItem('currentUser', JSON.stringify(fixedUser));
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω:', fixedUser);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return;
      }
      
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç ID');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    if (type === 'cargo' && !validateCargoForm()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–∞');
      return;
    }
    
    if (type === 'transport' && !validateTransportForm()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', { type, currentUser, formData, selectedValues });

    const cardData = {
      id: Date.now(),
      type: type,
      createdAt: new Date().toLocaleDateString('ru-RU'),
      status: '–ê–∫—Ç–∏–≤–Ω–∞',
      userId: currentUser?.id || '',
      ...formData,
      ...selectedValues,
      mainPhone: currentUser?.phone || '',
      userName: currentUser ? `${currentUser.firstName} ${currentUser.lastName}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };
    
    setCurrentCard(cardData);
    setShowCard(true);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const storageKey = `transportCards_${currentUser.id}`;
    const existingCards = JSON.parse(localStorage.getItem(storageKey) || '[]');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    existingCards.push(cardData);
    localStorage.setItem(storageKey, JSON.stringify(existingCards));
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const allCards = JSON.parse(localStorage.getItem('transportCards') || '[]');
    allCards.push(cardData);
    localStorage.setItem('transportCards', JSON.stringify(allCards));
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    const updatedUserCards = JSON.parse(localStorage.getItem(storageKey) || '[]');
    localStorage.setItem(storageKey, JSON.stringify(updatedUserCards));
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('=== –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò ===');
    console.log('–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', cardData);
    console.log('Storage key:', storageKey);
    console.log('–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', existingCards);
    console.log('–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', allCards);
    console.log('localStorage –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:');
    console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:', localStorage.getItem(storageKey));
    console.log('- –û–±—â–∏–µ:', localStorage.getItem('transportCards'));
    
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setActiveForm('cards');
    setFormData({
      loadingStartDate: '',
      loadingEndDate: '',
      loadingCity: '',
      unloadingCity: '',
      cargoWeight: '',
      cargoVolume: '',
      vehicleCount: '',
      cargoLength: '',
      cargoWidth: '',
      cargoHeight: '',
      cargoPrice: '',
      cargoCurrency: 'USD',
      transportWeight: '',
      transportVolume: '',
      transportLength: '',
      transportWidth: '',
      transportHeight: '',
      transportPrice: '',
      transportCurrency: 'USD',
      additionalPhone: '',
      email: '',
      additionalInfo: ''
    });
    setSelectedValues({
      loadingType: '',
      cargoType: '',
      vehicleType: '',
      reloadType: '',
      paymentMethod: '',
      paymentTerm: '',
      bargain: ''
    });
    setShowCargoDimensions(false);
    setShowTransportDimensions(false);
    setLoadingCity('');
    setUnloadingCity('');
    setDateError('');
  };

  const renderContent = () => {
    switch (activeForm) {
              case 'add-cargo':
          return (
            <>
                                          <div className="homepage-form-header-block">
                <div className="homepage-form-header-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="32" height="32" color="#000000" fill="none">
                    <path d="M12 22c-.818 0-1.6-.33-3.163-.99C4.946 19.366 3 18.543 3 17.16V7m9 15c.818 0 1.6-.33 3.163-.99C19.054 19.366 21 18.543 21 17.16V7m-9 15V11.355M8.326 9.691 5.405 8.278C3.802 7.502 3 7.114 3 6.5s.802-1.002 2.405-1.778l2.92-1.413C10.13 2.436 11.03 2 12 2s1.871.436 3.674 1.309l2.921 1.413C20.198 5.498 21 5.886 21 6.5s-.802 1.002-2.405 1.778l-2.92 1.413C13.87 10.564 12.97 11 12 11s-1.871-.436-3.674-1.309M6 12l2 1m9-9L7 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
                
                <div className="homepage-form-header-content">
                  <h2>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –≥—Ä—É–∑–∞</h2>
                  <p>–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—É–Ω–∫—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
                </div>
              </div>
              
              <div className="homepage-form-container">
                <div className="homepage-form-content">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ</h3>
                <p>–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ.</p>
                
                <div className="form-section">
                  <div className={`form-row ${validationErrors.loadingStartDate || validationErrors.loadingEndDate ? 'error' : ''}`}>
                    <div className="form-field">
                      <label>–î–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏</label>
                      <div className="date-range-input">
                        <input 
                          type="date" 
                          className={`form-input ${validationErrors.loadingStartDate ? 'error' : ''} ${shakeFields.loadingStartDate ? 'shake' : ''}`}
                          value={formData.loadingStartDate}
                          onChange={(e) => {
                            setFormData(prev => ({ ...prev, loadingStartDate: e.target.value }));
                            if (formData.loadingEndDate) {
                              validateDates(e.target.value, formData.loadingEndDate);
                            }
                            // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                            if (validationErrors.loadingStartDate) {
                              setValidationErrors(prev => ({ ...prev, loadingStartDate: false }));
                            }
                          }}
                        />
                        <span>-</span>
                        <input 
                          type="date" 
                          className={`form-input ${validationErrors.loadingEndDate ? 'error' : ''} ${shakeFields.loadingEndDate ? 'shake' : ''}`}
                          value={formData.loadingEndDate}
                          onChange={(e) => {
                            setFormData(prev => ({ ...prev, loadingEndDate: e.target.value }));
                            if (formData.loadingStartDate) {
                              validateDates(formData.loadingStartDate, e.target.value);
                            }
                            // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                            if (validationErrors.loadingEndDate) {
                              setValidationErrors(prev => ({ ...prev, loadingEndDate: false }));
                            }
                          }}
                        />
                      </div>
                      {dateError && <div className="error-message">{dateError}</div>}
                      {(validationErrors.loadingStartDate || validationErrors.loadingEndDate) && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏</div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–ú–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏</label>
                      <input 
                        type="text" 
                        className="form-input" 
                        placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ" 
                        value={loadingCity}
                        onChange={(e) => {
                          setLoadingCity(e.target.value);
                          setFormData(prev => ({ ...prev, loadingCity: e.target.value }));
                          setShowLoadingSuggestions(e.target.value.length > 0);
                        }}
                        onFocus={() => setShowLoadingSuggestions(loadingCity.length > 0)}
                      />
                      {showLoadingSuggestions && (
                        <div className="autocomplete-suggestions">
                          {filterCities(loadingCity).map((city, index) => (
                            <div 
                              key={index} 
                              className="suggestion-item"
                              onClick={() => handleCitySelect(city, true)}
                            >
                              {city}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                    <div className="form-field">
                      <label>–ú–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏</label>
                      <input 
                        type="text" 
                        className="form-input" 
                        placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ" 
                        value={unloadingCity}
                        onChange={(e) => {
                          setUnloadingCity(e.target.value);
                          setShowUnloadingSuggestions(e.target.value.length > 0);
                        }}
                        onFocus={() => setShowUnloadingSuggestions(unloadingCity.length > 0)}
                      />
                      {showUnloadingSuggestions && (
                        <div className="autocomplete-suggestions">
                          {filterCities(unloadingCity).map((city, index) => (
                            <div 
                              key={index} 
                              className="suggestion-item"
                              onClick={() => handleCitySelect(city, false)}
                            >
                              {city}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <button className="add-location-btn">–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏</button>
                    </div>
                    <div className="form-field">
                      <button className="add-location-btn">–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏</button>
                    </div>
                  </div>
                </div>
                
                <hr className="form-divider" />
                
                <div className="form-section">
                  <div className="form-row">
                    <div className={`form-field ${validationErrors.loadingType ? 'error' : ''}`}>
                      <label>–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏</label>
                      <select 
                        className={`form-input ${selectedValues.loadingType ? 'has-value' : ''} ${validationErrors.loadingType ? 'error' : ''} ${shakeFields.loadingType ? 'shake' : ''}`}
                        value={selectedValues.loadingType}
                        onChange={(e) => handleSelectChange('loadingType', e.target.value)}
                      >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                        <option value="back">–ó–∞–¥–Ω—è—è</option>
                        <option value="side">–ë–æ–∫–æ–≤–∞—è</option>
                        <option value="top">–í–µ—Ä—Ö–Ω—è—è</option>
                      </select>
                      {validationErrors.loadingType && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏</div>
                      )}
                    </div>
                    <div className={`form-field ${validationErrors.cargoType ? 'error' : ''}`}>
                      <label>–¢–∏–ø –≥—Ä—É–∑–∞</label>
                      <select 
                        className={`form-input ${selectedValues.cargoType ? 'has-value' : ''} ${validationErrors.cargoType ? 'error' : ''} ${shakeFields.cargoType ? 'shake' : ''}`}
                        value={selectedValues.cargoType}
                        onChange={(e) => handleSelectChange('cargoType', e.target.value)}
                      >
                        <option value="" disabled>–£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∑–∞ –≥—Ä—É–∑</option>
                        <option value="pallets">–ì—Ä—É–∑ –Ω–∞ –ø–∞–ª–ª–µ—Ç–∞—Ö</option>
                        <option value="equipment">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</option>
                        <option value="construction">–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã</option>
                        <option value="metal">–ú–µ—Ç–∞–ª–ª</option>
                        <option value="metal-products">–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç</option>
                        <option value="pipes">–¢—Ä—É–±—ã</option>
                        <option value="food">–ü—Ä–æ–¥—É–∫—Ç—ã</option>
                        <option value="big-bags">–ì—Ä—É–∑ –≤ –±–∏–≥-–±—ç–≥–∞—Ö</option>
                        <option value="container">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</option>
                        <option value="cement">–¶–µ–º–µ–Ω—Ç</option>
                        <option value="bitumen">–ë–∏—Ç—É–º</option>
                        <option value="fuel">–ì–°–ú</option>
                        <option value="flour">–ú—É–∫–∞</option>
                        <option value="oversized">–ù–µ–≥–∞–±–∞—Ä–∏—Ç</option>
                        <option value="cars">–ê–≤—Ç–æ–º–æ–±–∏–ª–∏</option>
                        <option value="lumber">–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã</option>
                        <option value="concrete">–ë–µ—Ç–æ–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è</option>
                        <option value="furniture">–ú–µ–±–µ–ª—å</option>
                        <option value="other">–î—Ä—É–≥–æ–π —Ç–∏–ø</option>
                      </select>
                      {validationErrors.cargoType && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞</div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è</label>
                      <select 
                        className={`form-input ${selectedValues.vehicleType ? 'has-value' : ''}`}
                        value={selectedValues.vehicleType}
                        onChange={(e) => handleSelectChange('vehicleType', e.target.value)}
                      >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                        <option value="tent">–¢–µ–Ω—Ç</option>
                        <option value="isotherm">–ò–∑–æ—Ç–µ—Ä–º</option>
                        <option value="refrigerator">–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä</option>
                        <option value="flatbed">–ë–æ—Ä—Ç–æ–≤–æ–π</option>
                        <option value="car-carrier">–ê–≤—Ç–æ–≤–æ–∑</option>
                        <option value="platform">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</option>
                        <option value="cement-truck">–¶–µ–º–µ–Ω—Ç–æ–≤–æ–∑</option>
                        <option value="bitumen-truck">–ë–∏—Ç—É–º–æ–≤–æ–∑</option>
                        <option value="fuel-truck">–ë–µ–Ω–∑–æ–≤–æ–∑</option>
                        <option value="flour-truck">–ú—É–∫–æ–≤–æ–∑</option>
                        <option value="tow-truck">–≠–≤–∞–∫—É–∞—Ç–æ—Ä</option>
                        <option value="timber-truck">–õ–µ—Å–æ–≤–æ–∑</option>
                        <option value="grain-truck">–ó–µ—Ä–Ω–æ–≤–æ–∑</option>
                        <option value="trailer">–¢—Ä–∞–ª</option>
                        <option value="dump-truck">–°–∞–º–æ—Å–≤–∞–ª</option>
                        <option value="container-truck">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑</option>
                        <option value="oversized-truck">–ù–µ–≥–∞–±–∞—Ä–∏—Ç</option>
                        <option value="bus">–ê–≤—Ç–æ–±—É—Å</option>
                        <option value="gas-truck">–ì–∞–∑–æ–≤–æ–∑</option>
                        <option value="other-truck">–î—Ä—É–≥–æ–π —Ç–∏–ø</option>
                      </select>
                    </div>
                    <div className={`form-field ${validationErrors.cargoWeight ? 'error' : ''}`}>
                      <label>–í–µ—Å –≥—Ä—É–∑–∞</label>
                      <input 
                        type="number" 
                        className={`form-input ${validationErrors.cargoWeight ? 'error' : ''} ${shakeFields.cargoWeight ? 'shake' : ''}`}
                        placeholder="–∫–≥" 
                        value={formData.cargoWeight}
                        onChange={(e) => {
                          setFormData(prev => ({ ...prev, cargoWeight: e.target.value }));
                          // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                          if (validationErrors.cargoWeight) {
                            setValidationErrors(prev => ({ ...prev, cargoWeight: false }));
                          }
                        }}
                      />
                      {validationErrors.cargoWeight && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞</div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className={`form-field ${validationErrors.cargoVolume ? 'error' : ''}`}>
                      <label>–û–±—ä–µ–º –≥—Ä—É–∑–∞</label>
                      <input 
                        type="number" 
                        className={`form-input ${validationErrors.cargoVolume ? 'error' : ''} ${shakeFields.cargoVolume ? 'shake' : ''}`}
                        placeholder="–º¬≥" 
                        value={formData.cargoVolume}
                        onChange={(e) => {
                          setFormData(prev => ({ ...prev, cargoVolume: e.target.value }));
                          // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                          if (validationErrors.cargoVolume) {
                            setValidationErrors(prev => ({ ...prev, cargoVolume: false }));
                          }
                        }}
                      />
                      {validationErrors.cargoVolume && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞</div>
                      )}
                    </div>
                    <div className="form-field">
                      <label>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∑–∞–≥—Ä—É–∑–∫–∏</label>
                      <select 
                        className={`form-input ${selectedValues.reloadType ? 'has-value' : ''}`}
                        value={selectedValues.reloadType}
                        onChange={(e) => handleSelectChange('reloadType', e.target.value)}
                      >
                        <option value="" disabled>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∑–∞–≥—Ä—É–∑–∫–∏</option>
                        <option value="no-reload">–ë–µ–∑ –¥–æ–≥—Ä—É–∑–∫–∏ (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –∞–≤—Ç–æ)</option>
                        <option value="possible-reload">–í–æ–∑–º–æ–∂–Ω–∞ –¥–æ–∑–∞–≥—Ä—É–∑–∫–∞</option>
                      </select>
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–£–∫–∞–∑–∞—Ç—å –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞</label>
                      <div 
                        className={`dimensions-trigger ${showCargoDimensions ? 'active' : ''}`}
                        onClick={() => setShowCargoDimensions(!showCargoDimensions)}
                      >
                        <input 
                          type="text" 
                          className="form-input" 
                          placeholder="–í–≤–µ—Å—Ç–∏ –¥–ª–∏–Ω—É, —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É" 
                          readOnly
                        />
                        <div className="dimensions-icon">
                          <div className="dimensions-circle"></div>
                        </div>
                      </div>
                    </div>
                    <div className="form-field">
                      <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</label>
                      <input 
                        type="number" 
                        className="form-input" 
                        placeholder="—à—Ç" 
                        value={formData.vehicleCount}
                        onChange={(e) => setFormData(prev => ({ ...prev, vehicleCount: e.target.value }))}
                      />
                    </div>
                  </div>
                  
                  {showCargoDimensions && (
                    <div className="form-row dimensions-row">
                      <div className="form-field">
                        <label>–î–ª–∏–Ω–∞ –≥—Ä—É–∑–∞</label>
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –≤ –º–µ—Ç—Ä–∞—Ö" 
                          value={formData.cargoLength}
                          onChange={(e) => setFormData(prev => ({ ...prev, cargoLength: e.target.value }))}
                        />
                      </div>
                      <div className="form-field">
                        <label>–®–∏—Ä–∏–Ω–∞ –≥—Ä—É–∑–∞</label>
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="–£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É –≤ –º–µ—Ç—Ä–∞—Ö" 
                          value={formData.cargoWidth}
                          onChange={(e) => setFormData(prev => ({ ...prev, cargoWidth: e.target.value }))}
                        />
                      </div>
                      <div className="form-field">
                        <label>–í—ã—Å–æ—Ç–∞ –≥—Ä—É–∑–∞</label>
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="–£–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤ –º–µ—Ç—Ä–∞—Ö" 
                          value={formData.cargoHeight}
                          onChange={(e) => setFormData(prev => ({ ...prev, cargoHeight: e.target.value }))}
                        />
                      </div>
                    </div>
                  )}
                </div>
                
                <hr className="form-divider" />
                
                <div className="form-section">
                  <div className="form-row">
                    <div className="form-field">
                      <label>–°—Ç–æ–∏–º–æ—Å—Ç—å</label>
                      <div className="currency-input">
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="0" 
                          value={formData.cargoPrice}
                          onChange={(e) => setFormData(prev => ({ ...prev, cargoPrice: e.target.value }))}
                        />
                        <select 
                          className="currency-select"
                          value={formData.cargoCurrency}
                          onChange={(e) => setFormData(prev => ({ ...prev, cargoCurrency: e.target.value }))}
                        >
                          <option value="USD">USD</option>
                          <option value="RUB">RUB</option>
                          <option value="UZS">UZS</option>
                        </select>
                      </div>
                    </div>
                    <div className="form-field">
                      <label>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</label>
                      <select 
                        className={`form-input ${selectedValues.paymentMethod ? 'has-value' : ''}`}
                        value={selectedValues.paymentMethod}
                        onChange={(e) => handleSelectChange('paymentMethod', e.target.value)}
                      >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</option>
                        <option value="cashless">–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π</option>
                        <option value="card">–ù–∞ –∫–∞—Ä—Ç—É</option>
                        <option value="combined">–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</option>
                      </select>
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã</label>
                      <select 
                        className={`form-input ${selectedValues.paymentTerm ? 'has-value' : ''}`}
                        value={selectedValues.paymentTerm}
                        onChange={(e) => handleSelectChange('paymentTerm', e.target.value)}
                      >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã</option>
                        <option value="unloading">–ü—Ä–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–µ</option>
                        <option value="prepayment">–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</option>
                        <option value="deferred">–û—Ç—Å—Ä–æ—á–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</option>
                      </select>
                    </div>
                    <div className="form-field">
                      <label>–¢–æ—Ä–≥</label>
                      <select 
                        className={`form-input ${selectedValues.bargain ? 'has-value' : ''}`}
                        value={selectedValues.bargain}
                        onChange={(e) => handleSelectChange('bargain', e.target.value)}
                      >
                        <option value="" disabled>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–∞</option>
                        <option value="yes">–í–æ–∑–º–æ–∂–µ–Ω</option>
                        <option value="no">–ù–µ—Ç</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div style={{ marginTop: '32px' }}>
                  <hr className="form-divider" />
                </div>
                
                <div className="form-section" style={{ marginTop: '32px' }}>
                  <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∑–∞–∫–∞–∑–µ</h3>
                  <p>–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å". –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.</p>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                      <input type="tel" className="form-input" value={currentUser?.phone || ''} readOnly />
                    </div>
                    <div className="form-field">
                      <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                      <input type="tel" className="form-input" />
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>E-mail</label>
                      <input type="email" className="form-input" placeholder="example@email.com" />
                    </div>
                  </div>
                </div>
                
                <div style={{ marginTop: '32px' }}>
                  <hr className="form-divider" />
                </div>
                

                
                <div className="form-section" style={{ marginTop: '32px' }}>
                  <div className="form-row">
                    <div className="form-field" style={{ width: '100%' }}>
                      <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
                      <textarea className="form-input" rows={4} placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..." />
                    </div>
                  </div>
                </div>
                
                <div style={{ marginTop: '32px', textAlign: 'center' }}>
                  <button className="submit-cargo-btn" onClick={() => createCard('cargo')}>
                    –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑
                  </button>
                </div>
              </div>
            </div>
          </>
        );
      
      case 'add-transport':
        return (
          <>
            <div className="homepage-form-header-block">
              <div className="homepage-form-header-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="32" height="32" color="#000000" fill="none">
                  <circle cx="17" cy="18" r="2" stroke="currentColor" stroke-width="2"/>
                  <circle cx="7" cy="18" r="2" stroke="currentColor" stroke-width="2"/>
                  <path d="M11 17h4M13.5 7h.943c1.31 0 1.966 0 2.521.315.556.314.926.895 1.667 2.056.52.814 1.064 1.406 1.831 1.931.772.53 1.14.789 1.343 1.204.195.398.195.869.195 1.811 0 1.243 0 1.864-.349 2.259l-.046.049c-.367.375-.946.375-2.102.375H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="m13 7 .994 2.486c.487 1.217.73 1.826 1.239 2.17.508.344 1.163.344 2.475.344H21M4.87 17c-1.353 0-2.03 0-2.45-.44C2 16.122 2 15.415 2 14V7c0-1.414 0-2.121.42-2.56S3.517 4 4.87 4h5.26c1.353 0 2.03 0 2.45.44C13 4.878 13 5.585 13 7v10H8.696" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              
              <div className="homepage-form-header-content">
                <h2>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</h2>
                <p>–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—É–Ω–∫—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
              </div>
            </div>
            
            <div className="homepage-form-container">
              <div className="homepage-form-content">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ</h3>
                <p>–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ.</p>
                
                <div className="form-section">
                  <div className="form-row">
                    <div className="form-field">
                      <label>–î–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏</label>
                      <div className="date-range-input">
                        <input 
                          type="date" 
                          className="form-input" 
                          value={formData.loadingStartDate}
                          onChange={(e) => {
                            setFormData(prev => ({ ...prev, loadingStartDate: e.target.value }));
                            if (formData.loadingEndDate) {
                              validateDates(e.target.value, formData.loadingEndDate);
                            }
                          }}
                        />
                        <span>-</span>
                        <input 
                          type="date" 
                          className="form-input" 
                          value={formData.loadingEndDate}
                          onChange={(e) => {
                            setFormData(prev => ({ ...prev, loadingEndDate: e.target.value }));
                            if (formData.loadingStartDate) {
                              validateDates(formData.loadingStartDate, e.target.value);
                            }
                          }}
                        />
                      </div>
                      {dateError && <div className="error-message">{dateError}</div>}
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–ú–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏</label>
                      <input 
                        type="text" 
                        className="form-input" 
                        placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ" 
                        value={loadingCity}
                        onChange={(e) => {
                          setLoadingCity(e.target.value);
                          setFormData(prev => ({ ...prev, loadingCity: e.target.value }));
                          setShowLoadingSuggestions(e.target.value.length > 0);
                        }}
                        onFocus={() => setShowLoadingSuggestions(loadingCity.length > 0)}
                      />
                      {showLoadingSuggestions && (
                        <div className="autocomplete-suggestions">
                          {filterCities(loadingCity).map((city, index) => (
                            <div 
                              key={index} 
                              className="suggestion-item"
                              onClick={() => handleCitySelect(city, true)}
                            >
                              {city}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                    <div className="form-field">
                      <label>–ú–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏</label>
                      <input 
                        type="text" 
                        className="form-input" 
                        placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ" 
                        value={unloadingCity}
                        onChange={(e) => {
                          setUnloadingCity(e.target.value);
                          setShowUnloadingSuggestions(e.target.value.length > 0);
                        }}
                        onFocus={() => setShowUnloadingSuggestions(unloadingCity.length > 0)}
                      />
                      {showUnloadingSuggestions && (
                        <div className="autocomplete-suggestions">
                          {filterCities(unloadingCity).map((city, index) => (
                            <div 
                              key={index} 
                              className="suggestion-item"
                              onClick={() => handleCitySelect(city, false)}
                            >
                              {city}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <button className="add-location-btn">–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏</button>
                    </div>
                    <div className="form-field">
                      <button className="add-location-btn">–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏</button>
                    </div>
                  </div>
                </div>
                
                <hr className="form-divider" />
                
                <div className="form-section">
                  <div className="form-row">
                    <div className={`form-field ${validationErrors.vehicleType ? 'error' : ''}`}>
                      <label>–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è</label>
                      <select 
                        className={`form-input ${selectedValues.vehicleType ? 'has-value' : ''} ${validationErrors.vehicleType ? 'error' : ''} ${shakeFields.vehicleType ? 'shake' : ''}`}
                        value={selectedValues.vehicleType}
                        onChange={(e) => handleSelectChange('vehicleType', e.target.value)}
                      >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                        <option value="tent">–¢–µ–Ω—Ç</option>
                        <option value="isotherm">–ò–∑–æ—Ç–µ—Ä–º</option>
                        <option value="refrigerator">–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä</option>
                        <option value="flatbed">–ë–æ—Ä—Ç–æ–≤–æ–π</option>
                        <option value="car-carrier">–ê–≤—Ç–æ–≤–æ–∑</option>
                        <option value="platform">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</option>
                        <option value="cement-truck">–¶–µ–º–µ–Ω—Ç–æ–≤–æ–∑</option>
                        <option value="bitumen-truck">–ë–∏—Ç—É–º–æ–≤–æ–∑</option>
                        <option value="fuel-truck">–ë–µ–Ω–∑–æ–≤–æ–∑</option>
                        <option value="flour-truck">–ú—É–∫–æ–≤–æ–∑</option>
                        <option value="tow-truck">–≠–≤–∞–∫—É–∞—Ç–æ—Ä</option>
                        <option value="timber-truck">–õ–µ—Å–æ–≤–æ–∑</option>
                        <option value="grain-truck">–ó–µ—Ä–Ω–æ–≤–æ–∑</option>
                        <option value="trailer">–¢—Ä–∞–ª</option>
                        <option value="dump-truck">–°–∞–º–æ—Å–≤–∞–ª</option>
                        <option value="container-truck">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑</option>
                        <option value="oversized-truck">–ù–µ–≥–∞–±–∞—Ä–∏—Ç</option>
                        <option value="bus">–ê–≤—Ç–æ–±—É—Å</option>
                        <option value="gas-truck">–ì–∞–∑–æ–≤–æ–∑</option>
                        <option value="other-truck">–î—Ä—É–≥–æ–π —Ç–∏–ø</option>
                      </select>
                      {validationErrors.vehicleType && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è</div>
                      )}
                    </div>
                    <div className="form-field">
                      <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</label>
                      <input 
                        type="number" 
                        className="form-input" 
                        placeholder="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" 
                        value={formData.vehicleCount}
                        onChange={(e) => setFormData(prev => ({ ...prev, vehicleCount: e.target.value }))}
                      />
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className={`form-field ${validationErrors.transportWeight ? 'error' : ''}`}>
                      <label>–ú–∞—Å—Å–∞ (—Ç)</label>
                      <input 
                        type="number" 
                        className={`form-input ${validationErrors.transportWeight ? 'error' : ''} ${shakeFields.transportWeight ? 'shake' : ''}`}
                        placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å" 
                        value={formData.transportWeight}
                        onChange={(e) => {
                          setFormData(prev => ({ ...prev, transportWeight: e.target.value }));
                          // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                          if (validationErrors.transportWeight) {
                            setValidationErrors(prev => ({ ...prev, transportWeight: false }));
                          }
                        }}
                      />
                      {validationErrors.transportWeight && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</div>
                      )}
                    </div>
                    <div className="form-field">
                      <label>–£–∫–∞–∑–∞—Ç—å –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞</label>
                      <div className="dimensions-trigger" onClick={() => setShowTransportDimensions(!showTransportDimensions)}>
                        <input 
                          type="text" 
                          className={`form-input ${showTransportDimensions ? 'active' : ''}`}
                          placeholder="–í–≤–µ—Å—Ç–∏ –¥–ª–∏–Ω—É, —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É"
                          readOnly
                        />
                        <div className="dimensions-icon">
                          <div className={`dimensions-circle ${showTransportDimensions ? 'active' : ''}`}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {showTransportDimensions && (
                    <div className="form-row dimensions-row">
                      <div className="form-field">
                        <label>–î–ª–∏–Ω–∞ –≥—Ä—É–∑–∞</label>
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –≤ –º–µ—Ç—Ä–∞—Ö" 
                          value={formData.transportLength}
                          onChange={(e) => setFormData(prev => ({ ...prev, transportLength: e.target.value }))}
                        />
                      </div>
                      <div className="form-field">
                        <label>–®–∏—Ä–∏–Ω–∞ –≥—Ä—É–∑–∞</label>
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="–£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É –≤ –º–µ—Ç—Ä–∞—Ö" 
                          value={formData.transportWidth}
                          onChange={(e) => setFormData(prev => ({ ...prev, transportWidth: e.target.value }))}
                        />
                      </div>
                      <div className="form-field">
                        <label>–í—ã—Å–æ—Ç–∞ –≥—Ä—É–∑–∞</label>
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="–£–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤ –º–µ—Ç—Ä–∞—Ö" 
                          value={formData.transportHeight}
                          onChange={(e) => setFormData(prev => ({ ...prev, transportHeight: e.target.value }))}
                        />
                      </div>
                    </div>
                  )}
                  
                  <div className="form-row">
                    <div className={`form-field ${validationErrors.transportVolume ? 'error' : ''}`}>
                      <label>–û–±—ä—ë–º (–º¬≥)</label>
                      <input 
                        type="number" 
                        className={`form-input ${validationErrors.transportVolume ? 'error' : ''} ${shakeFields.transportVolume ? 'shake' : ''}`}
                        placeholder="–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º" 
                        value={formData.transportVolume}
                        onChange={(e) => {
                          setFormData(prev => ({ ...prev, transportVolume: e.target.value }));
                          // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                          if (validationErrors.transportVolume) {
                            setValidationErrors(prev => ({ ...prev, transportVolume: false }));
                          }
                        }}
                      />
                      {validationErrors.transportVolume && (
                        <div className="error-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</div>
                      )}
                    </div>
                  </div>
                </div>
                
                <hr className="form-divider" />
                
                <div className="form-section">
                  <div className="form-row">
                    <div className="form-field">
                      <label>–°—Ç–æ–∏–º–æ—Å—Ç—å</label>
                      <div className="currency-input">
                        <select 
                          className="currency-select"
                          value={formData.transportCurrency}
                          onChange={(e) => setFormData(prev => ({ ...prev, transportCurrency: e.target.value }))}
                        >
                          <option value="USD">USD</option>
                          <option value="RUB">RUB</option>
                          <option value="UZS">UZS</option>
                        </select>
                        <input 
                          type="number" 
                          className="form-input" 
                          placeholder="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å" 
                          value={formData.transportPrice}
                          onChange={(e) => setFormData(prev => ({ ...prev, transportPrice: e.target.value }))}
                        />
                      </div>
                    </div>
                    <div className="form-field">
                      <label>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</label>
                      <select 
                        className={`form-input ${selectedValues.paymentMethod ? 'has-value' : ''}`}
                        value={selectedValues.paymentMethod}
                        onChange={(e) => handleSelectChange('paymentMethod', e.target.value)}
                      >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</option>
                        <option value="cashless">–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π</option>
                        <option value="card">–ù–∞ –∫–∞—Ä—Ç—É</option>
                        <option value="combined">–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</option>
                      </select>
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã</label>
                      <select 
                        className={`form-input ${selectedValues.paymentTerm ? 'has-value' : ''}`}
                        value={selectedValues.paymentTerm}
                        onChange={(e) => handleSelectChange('paymentTerm', e.target.value)}
                      >
                        <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã</option>
                        <option value="unloading">–ü—Ä–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–µ</option>
                        <option value="prepayment">–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</option>
                        <option value="deferred">–û—Ç—Å—Ä–æ—á–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</option>
                      </select>
                    </div>
                    <div className="form-field">
                      <label>–¢–æ—Ä–≥</label>
                                              <select 
                          className={`form-input ${selectedValues.bargain ? 'has-value' : ''}`}
                          value={selectedValues.bargain}
                          onChange={(e) => handleSelectChange('bargain', e.target.value)}
                        >
                        <option value="" disabled>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–∞</option>
                        <option value="yes">–í–æ–∑–º–æ–∂–µ–Ω</option>
                        <option value="no">–ù–µ–≤–æ–∑–º–æ–∂–µ–Ω</option>
                      </select>
                    </div>
                  </div>
                </div>
                
                <div style={{ marginTop: '32px' }}>
                  <hr className="form-divider" />
                </div>
                
                <div className="form-section" style={{ marginTop: '32px' }}>
                  <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∑–∞–∫–∞–∑–µ</h3>
                  <p>–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å". –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.</p>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                      <input type="tel" className="form-input" value={currentUser?.phone || ''} readOnly />
                    </div>
                    <div className="form-field">
                      <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                      <input type="tel" className="form-input" />
                    </div>
                  </div>
                  
                  <div className="form-row">
                    <div className="form-field">
                      <label>E-mail</label>
                      <input type="email" className="form-input" placeholder="example@email.com" />
                    </div>
                  </div>
                </div>
                
                <div style={{ marginTop: '32px' }}>
                  <hr className="form-divider" />
                </div>
                
                <div className="form-section" style={{ marginTop: '32px' }}>
                  <div className="form-row">
                    <div className="form-field" style={{ width: '100%' }}>
                      <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
                      <textarea className="form-input" rows={4} placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..." />
                    </div>
                  </div>
                </div>
                
                <div style={{ marginTop: '32px', textAlign: 'center' }}>
                  <button className="submit-transport-btn" onClick={() => createCard('transport')}>
                    –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                  </button>
                </div>
              </div>
            </div>
          </>
        );
      
      default:
        return (
          <div className="cards-container">
            <h3>–ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏</h3>
            <p>–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</p>
            
            {(() => {
              if (!currentUser?.id) {
                return (
                  <div className="no-cards">
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫.</p>
                  </div>
                );
              }
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              const storageKey = `transportCards_${currentUser.id}`;
              let userCards = JSON.parse(localStorage.getItem(storageKey) || '[]');
              
              // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø—Ä–æ–±—É–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å
              if (userCards.length === 0) {
                console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫...');
                const allCards = JSON.parse(localStorage.getItem('transportCards') || '[]');
                console.log('–í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:', allCards);
                
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ userId
                let migratedCards = allCards.filter((card: any) => card.userId === currentUser.id);
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ userId, –ø—Ä–æ–±—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                if (migratedCards.length === 0) {
                  console.log('üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞...');
                  migratedCards = allCards.filter((card: any) => card.mainPhone === currentUser.phone);
                  console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', migratedCards);
                }
                
                // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (migratedCards.length === 0) {
                  console.log('üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                  const userName = `${currentUser.firstName} ${currentUser.lastName}`;
                  migratedCards = allCards.filter((card: any) => card.userName === userName);
                  console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ –∏–º–µ–Ω–∏:', migratedCards);
                }
                
                if (migratedCards.length > 0) {
                  // –î–æ–±–∞–≤–ª—è–µ–º userId –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
                  const updatedCards = migratedCards.map((card: any) => ({
                    ...card,
                    userId: currentUser.id
                  }));
                  
                  localStorage.setItem(storageKey, JSON.stringify(updatedCards));
                  userCards = updatedCards;
                  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', updatedCards.length, '–∫–∞—Ä—Ç–æ—á–µ–∫');
                } else {
                  console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                }
              }
              
              // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              console.log('=== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ï–ö ===');
              console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.id);
              console.log('Storage key:', storageKey);
              console.log('–ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userCards);
              console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫:', userCards.length);
              console.log('localStorage —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
              console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:', localStorage.getItem(storageKey));
              console.log('- –û–±—â–∏–µ:', localStorage.getItem('transportCards'));
              
              // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤—ã—à–µ
              
              if (userCards.length === 0) {
                return (
                  <div className="no-cards">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" –≤ –ª–µ–≤–æ–º –º–µ–Ω—é.</p>
                  </div>
                );
              }
              
              return (
                <div className="cards-grid">
                  {userCards.map((card: any, index: number) => (
                    <div 
                      key={card.id} 
                      className={`transport-card ${deletingCardId === card.id ? 'deleting' : ''}`}
                    >
                      <div className="transport-card__header">
                        <div className="transport-card__header-left">
                          <div className="transport-card__type">
                            {card.type === 'cargo' ? '–ì—Ä—É–∑' : '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'}
                          </div>
                          <div className="transport-card__status">{card.status}</div>
                        </div>
                        <button 
                          className="transport-card__delete-btn"
                          onClick={() => deleteCard(card.id)}
                          title="–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"
                        >
                          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M6 2h4M5 4h6M4 6h8M3 8h10M2 10h12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M6 4v8m4-8v8" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </button>
                      </div>
                      
                      <div className="transport-card__content">
                        <div className="transport-card__info">
                          <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {card.createdAt}</p>
                          <p><strong>–î–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {card.loadingStartDate} - {card.loadingEndDate}</p>
                          <p><strong>–ú–∞—Ä—à—Ä—É—Ç:</strong> {card.loadingCity} ‚Üí {card.unloadingCity}</p>
                          {card.type === 'cargo' ? (
                            <>
                              <p><strong>–¢–∏–ø –≥—Ä—É–∑–∞:</strong> {getCargoTypeName(card.cargoType) || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                              <p><strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∑–∞–≥—Ä—É–∑–∫–∏:</strong> {getReloadTypeName(card.reloadType) || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                              <p><strong>–í–µ—Å:</strong> {card.cargoWeight || '–ù–µ —É–∫–∞–∑–∞–Ω'} —Ç</p>
                              <p><strong>–û–±—ä–µ–º:</strong> {card.cargoVolume || '–ù–µ —É–∫–∞–∑–∞–Ω'} –º¬≥</p>
                            </>
                          ) : (
                            <>
                              <p><strong>–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</strong> {getVehicleTypeName(card.vehicleType) || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                              <p><strong>–ú–∞—Å—Å–∞:</strong> {card.transportWeight || '–ù–µ —É–∫–∞–∑–∞–Ω'} —Ç</p>
                              <p><strong>–û–±—ä–µ–º:</strong> {card.transportVolume || '–ù–µ —É–∫–∞–∑–∞–Ω'} –º¬≥</p>
                            </>
                          )}
                          <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {card.cargoPrice || card.transportPrice || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} {card.cargoCurrency || card.transportCurrency}</p>
                        </div>
                        
                        <div className="transport-card__contacts">
                          <p><strong>–ö–æ–Ω—Ç–∞–∫—Ç:</strong> {card.userName}</p>
                          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {card.mainPhone}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              );
            })()}
          </div>
        );
    }
  };

  return (
    <>
      <Header />
      <div className="homepage-container container">
        <LeftSidebar 
          onAddCargo={handleAddCargo}
          onAddTransport={handleAddTransport}
          onShowCards={handleShowCards}
          activeForm={activeForm}
          currentUser={currentUser}
        />
        <div className="homepage-content">
          {renderContent()}
        </div>
      </div>
    </>
  );
};

export default Homepage;


