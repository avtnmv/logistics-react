// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export interface VerificationResult {
  success: boolean;
  message: string;
  code?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export interface VerificationParams {
  phone: string;
  userName?: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export class VerificationService {
  private static instance: VerificationService;
  private generatedCodes: Map<string, { code: string; timestamp: number }> = new Map();
  private readonly CODE_EXPIRY_TIME = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

  private constructor() {}

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)
   */
  public static getInstance(): VerificationService {
    if (!VerificationService.instance) {
      VerificationService.instance = new VerificationService();
    }
    return VerificationService.instance;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
   */
  private generateVerificationCode(): string {
    return Math.floor(1000 + Math.random() * 9000).toString();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
   */
  public async sendCode(params: VerificationParams): Promise<VerificationResult> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      const code = this.generateVerificationCode();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
      this.generatedCodes.set(params.phone, {
        code,
        timestamp: Date.now()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ SMS
      return await this.sendSMSCode(params.phone, code, params.userName);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ SMS (–∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  private async sendSMSCode(
    phone: string, 
    code: string, 
    userName?: string
  ): Promise<VerificationResult> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É SMS
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log(`üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      success: true,
      message: `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}`,
      code: code // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  public verifyCode(phone: string, inputCode: string): VerificationResult {
    const storedData = this.generatedCodes.get(phone);
    
    if (!storedData) {
      return {
        success: false,
        message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
    if (Date.now() - storedData.timestamp > this.CODE_EXPIRY_TIME) {
      this.generatedCodes.delete(phone);
      return {
        success: false,
        message: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    if (storedData.code === inputCode) {
      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
      this.generatedCodes.delete(phone);
      return {
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
      };
    } else {
      return {
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  public hasActiveCode(phone: string): boolean {
    const storedData = this.generatedCodes.get(phone);
    if (!storedData) return false;
    
    return Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
   */
  public cleanupExpiredCodes(): void {
    const now = Date.now();
    this.generatedCodes.forEach((data, phone) => {
      if (now - data.timestamp > this.CODE_EXPIRY_TIME) {
        this.generatedCodes.delete(phone);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤
   */
  public getActiveCodesCount(): number {
    this.cleanupExpiredCodes();
    return this.generatedCodes.size;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  public getCodeForTesting(phone: string): string | null {
    const storedData = this.generatedCodes.get(phone);
    if (storedData && Date.now() - storedData.timestamp <= this.CODE_EXPIRY_TIME) {
      return storedData.code;
    }
    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const verificationService = VerificationService.getInstance();
